# -*- coding: utf-8 -*-
"""machine learning email spam detection by classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MeJEpJDwmOSNrkBDVh098XrV02bPi_vj
"""

!pip install kaggle

from google.colab import files
files.upload()  # Upload kaggle.json here

import os
import zipfile

os.environ['KAGGLE_CONFIG_DIR'] = "/content/"

!kaggle datasets download -d uciml/sms-spam-collection-dataset

!unzip sms-spam-collection-dataset.zip

import pandas as pd

df = pd.read_csv("spam.csv", encoding='latin-1')[['v1', 'v2']]
df.columns = ['label', 'message']
df.head()

df['label'] = df['label'].map({'ham': 0, 'spam': 1})

from sklearn.model_selection import train_test_split

X = df['message']
y = df['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

from sklearn.naive_bayes import MultinomialNB

model = MultinomialNB()
model.fit(X_train_vec, y_train)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

y_pred = model.predict(X_test_vec)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

#Accuracy / Performance Graph
import matplotlib.pyplot as plt

from sklearn.metrics import classification_report

# Get the classification report as a dictionary
report = classification_report(y_test, y_pred, output_dict=True)

# Extract values
metrics = ['precision', 'recall', 'f1-score']
spam_scores = [report['1'][m] for m in metrics]
ham_scores = [report['0'][m] for m in metrics]

x = range(len(metrics))

# Plot
plt.figure(figsize=(8, 5))
plt.bar([i - 0.15 for i in x], ham_scores, width=0.3, label='Ham', color='skyblue')
plt.bar([i + 0.15 for i in x], spam_scores, width=0.3, label='Spam', color='salmon')
plt.xticks(x, metrics)
plt.ylim(0.0, 1.1)
plt.title('Classification Report Metrics')
plt.ylabel('Score')
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(5, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.tight_layout()
plt.show()

# Enter your custom messages here
custom_messages = ["Send the notes ASAP!"]

# Transform the custom messages using the same vectorizer
custom_vec = vectorizer.transform(custom_messages)

# Predict using your model
custom_pred = model.predict(custom_vec)

# Print results
for msg, pred in zip(custom_messages, custom_pred):
    label = 'Spam' if pred == 1 else 'Ham'
    print(f"Message: {msg}\nPrediction: {label}\n")

import joblib

# Save model and vectorizer
joblib.dump(model, "spam_classifier.pkl")
joblib.dump(vectorizer, "vectorizer.pkl")

model = joblib.load("spam_classifier.pkl")
vectorizer = joblib.load("vectorizer.pkl")